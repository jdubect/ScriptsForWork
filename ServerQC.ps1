$HostServer=$true$VirtualServer=$false$CheckRWInstalled=$true$CheckSecureBoot=$true$CheckAutoStart=$true$CheckUPSSoftware=$true$CheckVSSEnabled=$false$ExitMenu=$false$tabadminpw=$null$ErrorActionPreference="SilentlyContinue"Function CheckSecureBoot {    write-host "- Task 30: Check VM Secure Boot"    If ($CheckSecureBoot) {        $VMS=Get-VM        Foreach ($VM in $VMS) {            $VMName=$VM.Name | Out-String            $VMName=$VMName.trim()            $SecureBoot=Get-VMFirmware $VM | Select-object SecureBoot | ft -hidetableheaders | Out-String            $Secureboot=$SecureBoot.trim()            if ($secureboot -eq "Off") { write-host "  - $VMName is $SecureBoot" -f green } else { write-host "  - $VMName is $SecureBoot" -f red }            }        } else {            write-host "  - Check bypassed"            }    }Function CheckAutoStart {    write-host "- Task 120: Check Autostart of VMs"    if ($CheckAutoStart) {        $VMS=Get-VM        Foreach ($VM in $VMS) {            $VMName=$VM.Name | Out-String            $VMName=$VMName.trim()            $AutoStart=Get-VM $VMName | Select-object AutomaticStartAction | ft -hidetableheaders | Out-String            $AutoStart=$AutoStart.trim()            if ($Autostart -eq "Start") { write-host "  - $VMName is $Autostart" -f green } else { write-host "  - $VMName is $AutoStart" -f red }            }    } else {        write-host "  - Check bypassed"        }    }Function CheckVSSEnabled {    write-host "- TASK 110: Check VSS EXCEPT for host servers"    $servername=$env:COMPUTERNAME    if ($CheckVSSEnabled) {        $driveLetterArray = @()
        (get-wmiobject win32_share -computername $serverName).path | foreach {
        $driveLetter = $_.split(":")[0]
        if (($driveLetter) -and ($driveLetterArray -notcontains $driveLetter)) {
            $driveLetterArray += $driveLetter
            }
        } 
    foreach ($letter in $driveLetterArray) {
        $letter = $letter + ":\"
        $deviceID = (gwmi win32_volume -computername $serverName | Where-Object {$_.Name -eq $letter}).deviceID
        $deviceID = $deviceID.TrimStart("\\?\")
        $deviceID = "Win32_Volume.DeviceID=`"\\\\?\\" + $deviceID + "\`""
        $shadowQuery = gwmi win32_shadowstorage -computername $serverName | Where-Object {$_.Volume -eq $deviceID}
        if ($shadowQuery) {
            write-host "  - Volume shadow enabled on drive $letter" -f green
        } else {
            write-host "  - Volume shadow NOT enabled on drive $letter" -f red
            }
        }    } else {        write-host "  - Check bypassed"        }    }Function CheckTabadminPW {    write-host "- TASK 45: Check tabadmin account"    $computer = $env:COMPUTERNAME    Add-Type -AssemblyName System.DirectoryServices.AccountManagement
    $obj = New-Object System.DirectoryServices.AccountManagement.PrincipalContext('machine',$computer)
    if ($obj.ValidateCredentials("tabadmin", $tabadminpw)) { write-host "  - tabadmin checks out" -f green } else { write-host "  - tabadmin check failed" -f red }}Function CheckNIC {    write-host "- TASK 80: Verify NIC offloading is disabled"    $NICs=Get-NetAdapter    foreach ($NIC in $NICs) {         $Enabled=$false        $NICName=$NIC.Name | out-string        $NICName=$NICName.trim()        Get-NetAdapterChecksumOffload -Name "$NICName"         Get-NetAdapterLso -name "$NICNAme" | Select-Object Name,IPv4Enabled        }    }Function CheckPowerSettings {    write-host "- TASK 100: Verify Power Settings"    $CurrentPlan=Get-WmiObject -Class Win32_PowerPlan -Namespace "root\cimv2\power" | Where-Object {$_.IsActive -eq $true} | Select-Object {$_.ElementName} | ft -HideTableHeaders | Out-String    $CurrentPlan=$CurrentPlan.trim()    If ($CurrentPlan -eq "High Performance") { write-host "  - High Performance plan is active" -f green } else { write-host "  - $CurrentPlan is active" -f red }    }Function CheckEventLogs {    write-host "- TASK 65: Check Event Logs for Issues"    $SysErrors=(get-eventlog -entrytype Warning,Error -logname system -After (Get-Date).AddDays(-7)).count
    $AppErrors=(get-eventlog -entrytype Warning,Error -logname application -After (Get-Date).AddDays(-7)).count
    $SecErrors=(Get-EventLog -logname security -EntryType FailureAudit -After (Get-Date).AddDays(-7)).count
    $EventFailed=$false
    if (($SysErrors -gt 10) -or ($AppErrors -gt 10) -or ($SecErrors -gt 10)) {
        write-host "  - There have been $SysErrors system log errors, $Apperrors application log errors and $SecErrors security log failures" -f red 
        } else {
        write-host "  - There have been $SysErrors system log errors, $Apperrors application log errors and $SecErrors security log failures" -f green
        }
    }Function CheckUpdateSettings {    write-host "- TASK 70: Check Windows Update Settings"    $AutoUpdatePath = "HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
    if (Get-ItemProperty $AutoUpdatePath -Name NoAutoUpdate) {
        $NoAutoUpdate = Get-ItemProperty $AutoUpdatePath -Name NoAutoUpdate | Select-Object NoAutoUpdate | ft -HideTableHeaders | out-string
        $NoAutoUpdate=$NoAutoUpdate.trim()
        } else { $NoAutoUpdate="unset" }
    $AUOptions = Get-ItemProperty $AutoUpdatePath -Name AUOptions | Select-Object AUOptions | ft -HideTableHeaders | out-string
    $AUOptions=$AUOptions.trim()
    If ($NoAutoUpdate -eq "1") { write-host "  - automatic updates are disabled" -f green 
        } else {
        if ($noAutoUpdate -eq "unset") { write-host "  - automatic updates are not defined!" -f red } else { write-host "  - automatic updates are possibly enabled!" -f red }
        }
    switch ($AUOptions) {
        1 { write-host "  - auto-update set to disabled" -f green }
        2 { write-host "  - auto-update set to notify" -f green }
        3 { write-host "  - auto-update set to download & notify" -f green }
        4 { write-host "  - auto-update set to download and install" -f red }
        }    }Function CheckRWSoftware {    write-host "- TASK 60: Check RAID Web Console is Installed"    If ($CheckRWInstalled) {        If ((Get-ItemProperty 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*','HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Where { $_.DisplayName -like "*raid web*" }) -ne $null) {            write-host "  - RAIDWeb found to be installed -- BE SURE TO CHECK A SCREENCAP EXISTS IN THE CW CONFIG!" -ForegroundColor Green            } else {            write-host "  - RAIDWeb not found" -ForegroundColor Red            }        } else {        write-host "  - Skipping RAIDWeb check; not selected"        }    }Function CheckUPSSoftware {    write-host "- TASK 66: Check UPS Software"    If ($CheckUPSSoftware) {        If ((Get-ItemProperty 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*','HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Where { $_.DisplayName -like "*powerchute*" }) -ne $null) {            write-host "  - PowerChute found to be installed -- BE SURE TO TEST THE CREDS IN CW AND MAKE SURE THE SHUTDOWN SETTINGS ARE CORRECT!"  -ForegroundColor Green            } else {            write-host "  - PowerChute not found" -ForegroundColor Red            }        } else {        write-host "  - Skipping PowerChute check; not selected"        }    }while (-not ($ExitMenu)) {    clear    $key=$null    write-host "Server QC Check Script v1.0.2)"    write-host "=============================="    write-host "SELECTIONS"    write-host "1 - Virtual Host: $HostServer"    write-host "2 - Virtual Server: $VirtualServer"    write-host "3 - Check for RAIDWeb: $CheckRWInstalled"    write-host "4 - Check for PowerChute installed: $CheckUPSSoftware"    write-host "5 - Check VMs for Secure Boot: $CheckSecureBoot"    write-host "6 - Check VMs for Auto-start: $CheckAutoStart"    write-host "7 - Should VSS Be Enabled: $CheckVSSEnabled"    write-host "8 - tabadmin PW: $tabadminpw"    write-host    write-host "MENU"    write-host "g - Run checks"    write-host "q - abort"    write-host    $key = Read-Host "Please make a selection"    if ($key -eq "1") {         if ($HostServer) {            $HostServer=$false            $CheckAutoStart=$false            $CheckSecureBoot=$false            $CheckVSSEnabled=$true            } else {            $HostServer=$true            $CheckAutoStart=$true            $CheckSecureBoot=$true            $CheckVSSEnabled=$false            }        }    if ($key -eq "2") {         if ($VirtualServer) {             $VirtualServer=$false            $CheckRWInstalled=$true            $CheckUPSSoftware=$true            } else {            $VirtualServer=$true            $CheckRWInstalled=$false            $CheckUPSSoftware=$false            }        }    if ($key -eq "3") { if ($CheckRWInstalled) { $CheckRWInstalled=$false } else { $CheckRWInstalled=$true } }    if ($key -eq "4") { if ($CheckUPSSoftware) { $CheckUPSSoftware=$false } else { $CheckUPSSoftware=$true } }    if ($key -eq "5") { if ($CheckSecureBoot) { $CheckSecureBoot=$false } else { $CheckSecureBoot=$true } }    if ($key -eq "6") { if ($CheckAutoStart) { $CheckAutoStart=$false } else { $CheckAutoStart=$true } }    if ($key -eq "7") { if ($CheckVSSEnabled) { $CheckVSSEnabled=$false} else { $CheckVSSEnabled=$true } }    if ($key -eq "8") {        $tabadminpw = read-host "Please enter the password for the tabadmin user on this server"        }    if (($key -eq "q") -or ($key -eq "Q")) { $ExitMenu=$True }    if ($key -eq "g") {        $ExitMenu=$True        write-host        CheckSecureBoot        CheckTabadminPW        CheckRWSoftware        CheckEventLogs        CheckUPSSoftware        CheckUpdateSettings        CheckNIC        CheckPowerSettings        CheckVSSEnabled        CheckAutoStart        write-host        Read-host "Press enter to exit..."        }    }